/*
 * Copyright (c) 2017. Eric Angeli
 *
 *  Permission is hereby granted, free of charge,
 *  to any person obtaining a copy of this software
 *  and associated documentation files (the "Software"),
 *  to deal in the Software without restriction,
 *  including without limitation the rights to use, copy,
 *  modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit
 *  persons to whom the Software is furnished to do so,
 *  subject to the following conditions:
 *
 *  The above copyright notice and this permission
 *  notice shall be included in all copies or substantial
 *  portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 *  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
 *  WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
 *  AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 *  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
 *  WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 */
import java.text.SimpleDateFormat
import java.util.concurrent.TimeUnit
import com.thegoate.gradle.GoateGradleHelper
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven{
            url "https://dl.bintray.com/goate/GoaTE"
        }
        mavenLocal()
    }
    dependencies {
        classpath 'com.sourcemuse.gradle.plugin:gradle-mongo-plugin:0.13.0'
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.13.0"
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.4'
        classpath 'goate:gradle:0.15.8.202002171539'
    }
}

//apply plugin: 'mongo'
//
//mongo {
//    port 27017
//    storageLocation "mongo"
//}

//-Dorg.gradle.java.home=<path to jdk>
SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmm");
def maxJV = "8";//this should be updated when a new version of java is supported.
String javaVersion = "" + Integer.parseInt(project.hasProperty("javaVersion") ? (project.javaVersion.isEmpty() ? maxJV : project.javaVersion) : maxJV)
if (javaVersion.contains(".")) {
    javaVersion = javaVersion.substring(("" + javaVersion).indexOf(".") + 1);
}

def majorVersion = 0
def minorVersion = 15
def vbase = "${majorVersion}.${minorVersion}.${javaVersion}"
def buildDate = "" + (project.hasProperty("buildDate")?project.buildDate:sdf.format(new Date()))
def v = "${vbase}." + buildDate
def release = project.hasProperty("release") ? (project.release.equals("final") | project.release.equals("release") ? '' : project.release) : 'beta'

configurations.all {
    resolutionStrategy {
        cacheDynamicVersionsFor 5, TimeUnit.SECONDS
    }
}

wrapper {
    gradleVersion = '6.0.1' //version required
}

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven{
            url "https://dl.bintray.com/goate/GoaTE"
        }
        mavenLocal()
    }
    apply plugin: 'idea'
    apply plugin: 'jacoco'
	apply plugin: 'java'
    apply plugin: 'goate.test'
    version = v + release;
    group = "goate"
    configurations {
        annotations;
    }
    boolean oneOff = project.hasProperty("oneOff")
    def projectJavaLabel = project.hasProperty("projectJavaLabel")?project.projectJavaLabel:"false"
    def projectName = "${project.name}" + (Boolean.parseBoolean(""+projectJavaLabel)?javaVersion:"")
    projectName = projectName.replace(":", "").replace("module", "")

    project.ext.set("internalVersion", vbase);
    project.ext.set("javaVersion", Integer.parseInt(javaVersion));
    project.ext.set("maxJV", maxJV);
    project.ext.set("fullName", projectName);
    //mainClassName = project.hasProperty("main") ? project.main : ''
    idea {
        module {
            name = "${project.name}"
        }
    }
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    dependencies {
		compile 'goate:kernel:0.15.8.202010272109'
		compile 'goate:testng:0.15.8.202010272109'
        testCompile 'ch.qos.logback:logback-classic:1.2.3'
        testCompile 'ch.qos.logback:logback-access:1.2.3'
        testCompile 'ch.qos.logback:logback-core:1.2.3'
        testCompile 'org.codehaus.janino:janino:2.7.8'
        compile 'com.epam.reportportal:agent-java-testng:5.0.8'
        testCompile 'com.epam.reportportal:logger-java-logback:5.0.3'
        annotationProcessor 'org.atteo.classindex:classindex:3.6'
        testAnnotationProcessor 'org.atteo.classindex:classindex:3.6'
    }

    jar.baseName = projectName

    sourceSets {
        test {
            resources { srcDirs "cucumbers" } //only needed for cucumbers
        }
    }
    jacoco {
        toolVersion = "0.8.5"//"0.7.6.201602180812"
    }
    configurations.all {
        resolutionStrategy.force 'xml-apis:xml-apis:1.4.01'
        exclude group: 'd-haven-managed-pool', module: 'd-haven-managed-pool'
        exclude group: 'event', module: 'event'
        exclude group: 'commons-math3', module: 'commons-math3'
        exclude group: 'commons-pool2', module: 'commons-pool2'
    }

    idea {
        module {
            scopes.PROVIDED.plus += [configurations.annotations]
        }
    }

    test{
        useTestNG() {
            listeners << 'com.thegoate.rp.CustomTestNGListener'
        }
    }
}

processTestResources {
    expand project.properties
}

// get class dirs for project dependencies
FileCollection getJacocoClassDirs() {
    Set srcDirs = subprojects.sourceSets.main.output
    return files(srcDirs)
}

FileCollection getJacocoExecFiles() {
    Set srcDirs = subprojects.jacocoTestReport.executionData
    Iterator it = srcDirs.iterator()
    while (it.hasNext()) {
        FileCollection fc = it.next()
        for (File f : fc.files) {
            if (f.exists()) {
                System.out.println(f.absolutePath)
            } else {
                it.remove()
                System.out.println("\tremoving: " + f.absolutePath)
            }
        }
    }
    return files(srcDirs)
}

// get source dirs for project dependencies
FileCollection getJacocoSrcDirs() {
    Set srcDirs = subprojects.sourceSets.main.allSource.srcDirs
    return files(srcDirs)
}

task jacocoMerge(type: JacocoMerge) {
    executionData = getJacocoExecFiles()
    destinationFile = project.file("$buildDir/jacoco/data/jacoco.exec")
}

// generate coverage report for this project and all its project dependencies
task jacocoMergedReport(type: JacocoReport) {
    dependsOn jacocoMerge
    System.out.println("merged execs: " + jacocoMerge.destinationFile);
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("$buildDir/reports/jacoco")
    }

    classDirectories.from = files(getJacocoClassDirs().collect {
        fileTree(dir: it, exclude: ['com/**/gradle/**','com/**/performance/**','com/**/barn/idea/**'])
    })
    sourceDirectories.from = getJacocoSrcDirs()

    executionData jacocoMerge.destinationFile
}

task testReport(type: TestReport) {
    if(project.hasProperty("testReport")) {
        subprojects {
            plugins.withType(JavaPlugin) {
                test {
                    ignoreFailures true
                }
            }
        }
    }
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` task in all subprojects
    reportOn subprojects*.test
}
